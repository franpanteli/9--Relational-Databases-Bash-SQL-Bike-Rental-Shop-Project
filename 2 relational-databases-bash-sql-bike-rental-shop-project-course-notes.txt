
MAKING THE PROJECT DATABASE:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> echo hello terminal <- To print "hello terminal" in the terminal 
-> psql --username=freecodecamp --dbname=postgres 
-> \l 
-> CREATE DATABASE bikes;
-> \c bikes <- Connect to the database 
-> CREATE TABLE bikes();
-> \d
-> ALTER TABLE bikes ADD COLUMN bike_id SERIAL PRIMARY KEY;
-> \d bikes
-> ALTER TABLE bikes ADD COLUMN type VARCHAR(50) NOT NULL;
-> \d bikes
-> ALTER TABLE bikes ADD COLUMN size INT NOT NULL;
-> ALTER TABLE bikes ADD COLUMN available BOOLEAN NOT NULL DEFAULT TRUE;
-> \d bikes
-> CREATE TABLE customers();
-> ALTER TABLE customers ADD COLUMN customer_id SERIAL PRIMARY KEY; <- Add keys to the tables 
-> \d customers
-> ALTER TABLE customers ADD COLUMN phone VARCHAR(15) NOT NULL UNIQUE; <- Add columns to the tables 
-> ALTER TABLE customers ADD COLUMN name VARCHAR(40) NOT NULL;
-> \d customers
-> CREATE TABLE rentals(); 
-> ALTER TABLE rentals ADD COLUMN rental_id SERIAL PRIMARY KEY;
-> \d rentals
-> ALTER TABLE rentals ADD COLUMN customer_id INT NOT NULL;
-> ALTER TABLE table_name ADD FOREIGN KEY(column_name) REFERENCES referenced_table(referenced_column); <- Adding foreign keys 
	-> We are adding foreign keys 
	-> We have the customers and the bikes tables
	-> ALTER TABLE rentals ADD FOREIGN KEY(customer_id) REFERENCES customers(customer_id);
-> \d rentals
-> ALTER TABLE rentals ADD COLUMN bike_id INT NOT NULL;
-> ALTER TABLE rentals ADD FOREIGN KEY(bike_id) REFERENCES bikes(bike_id);
-> \d rentals
-> ALTER TABLE rentals ADD COLUMN date_rented DATE NOT NULL DEFAULT NOW();
-> \d rentals
-> ALTER TABLE rentals ADD COLUMN date_returned DATE;
-> \d rentals
-> \d
-> INSERT INTO bikes(type, size) VALUES('Mountain', 27);
-> SELECT * from bikes;
-> INSERT INTO bikes(type, size) VALUES('Mountain', 28);
-> INSERT INTO bikes(type, size) VALUES('Mountain', 29);
-> INSERT INTO bikes(type, size) VALUES('Road', 27);
-> SELECT * from bikes;
-> INSERT INTO bikes(type, size) VALUES('Road', 28), ('Road', 29);
-> INSERT INTO bikes(type, size) VALUES('BMX', 19), ('BMX', 20), ('BMX', 21);
	-> We are populating the tables with the different bikes 
-> SELECT * from bikes;

WRITING THE PROJECT .SH FILE:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> \q <- To exit out of the project psql prompt and enter back into a Bash terminal 
-> chmod +x bike-shop.sh
-> ./bike-shop.sh <- To run the project shell file 
-> We are making a series of edits to the project .sh file 
-> After completing this, it looks like this:

        #!/bin/bash
        PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"

        echo -e "\n~~~~~ Bike Rental Shop ~~~~~\n"
        MAIN_MENU() {
        if [[ $1 ]]
        then
            echo -e "\n$1"
        fi
        echo "How may I help you?"
        echo -e "\n1. Rent a bike\n2. Return a bike\n3. Exit"
        read MAIN_MENU_SELECTION
        }
        RENT_MENU() {
        # get available bikes
        AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")
        # if no bikes available
        echo "$AVAILABLE_BIKES"
        # send to main menu

        }
        RETURN_MENU() {
        echo "Return Menu"
        }
        EXIT() {
        echo -e "\nThank you for stopping in.\n"
        }

        MAIN_MENU

        case $MAIN_MENU_SELECTION in
        1) RENT_MENU ;;
        2) RETURN_MENU ;;
        3) EXIT ;;
        *) MAIN_MENU "Please enter a valid option." ;;
        esac

        if [[ $1 ]]
        then
        echo -e "\n$1"
        fi

MODIFYING THE PROJECT DATABASE:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> UPDATE bikes SET available = false WHERE available = true; <- We are then reseting one of the columns for the project in the psql prompt 
-> More changes were made to the project .sh file, this is its current content:

        #!/bin/bash

        PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"

        echo -e "\n~~~~~ Bike Rental Shop ~~~~~\n"

        MAIN_MENU() {
        if [[ $1 ]]
        then
            echo -e "\n$1"
        fi

        echo "How may I help you?" 
        echo -e "\n1. Rent a bike\n2. Return a bike\n3. Exit"
        read MAIN_MENU_SELECTION

        case $MAIN_MENU_SELECTION in
            1) RENT_MENU ;;
            2) RETURN_MENU ;;
            3) EXIT ;;
            *) MAIN_MENU "Please enter a valid option." ;;
        esac
        }

        RENT_MENU() {
        # get available bikes
        AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")


        # if no bikes available
        if [[ -z $AVAILABLE_BIKES ]]
        then
            # send to main menu
            MAIN_MENU "Sorry, we don't have any bikes available right now."
        else
            # display available bikes
            echo -e "\nHere are the bikes we have available:"
            echo "$AVAILABLE_BIKES"
            # ask for bike to rent

            # if input is not a number

            # send to main menu

        fi
        }

        RETURN_MENU() {
        echo "Return Menu"
        }

        EXIT() {
        echo -e "\nThank you for stopping in.\n"
        }

        MAIN_MENU

-> UPDATE bikes SET available = true WHERE type != 'BMX'; <- Moving back to editing the project .sh file 

ENTERING BASH TESTS INTO THE TERMINAL: 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> At the moment, this is the cost of the project .sh file: 

        #!/bin/bash

        PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"

        echo -e "\n~~~~~ Bike Rental Shop ~~~~~\n"

        MAIN_MENU() {
        if [[ $1 ]]
        then
            echo -e "\n$1"
        fi

        echo "How may I help you?" 
        echo -e "\n1. Rent a bike\n2. Return a bike\n3. Exit"
        read MAIN_MENU_SELECTION

        case $MAIN_MENU_SELECTION in
            1) RENT_MENU ;;
            2) RETURN_MENU ;;
            3) EXIT ;;
            *) MAIN_MENU "Please enter a valid option." ;;
        esac
        }

        RENT_MENU() {
        # get available bikes
        AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")


        # if no bikes available
        if [[ -z $AVAILABLE_BIKES ]]
        then
            # send to main menu
            MAIN_MENU "Sorry, we don't have any bikes available right now."
        else
            # display available bikes
            echo -e "\nHere are the bikes we have available:"

            echo "$AVAILABLE_BIKES" | while read BIKE_ID BAR TYPE BAR SIZE
            do
            echo "$BIKE_ID) $SIZE\" $TYPE Bike"
            done


            # ask for bike to rent
            echo -e "\nWhich one would you like to rent?"
            read BIKE_ID_TO_RENT
            # if input is not a number

            # send to main menu

        fi
        }

        RETURN_MENU() {
        echo "Return Menu"
        }

        EXIT() {
        echo -e "\nThank you for stopping in.\n"
        }

        MAIN_MENU

-> We are adding more information into the project .sh file 
-> We first test the different commands in a psql prompt 
-> [[ a =~ [0-9] ]]; echo $? <- We are then entering this into a Bash terminal to test if the statement is True or not 
	-> The result of this is 1 (False)
-> [[ a1 =~ [0-9] ]]; echo $? <- And this one returns True 
-> [[ a1 =~ ^[0-9]$ ]]; echo $? <- False (1), one error 
-> [[ 1 =~ ^[0-9]$ ]]; echo $? <- True (0), no errors 
-> [[ 11 =~ ^[0-9]$ ]]; echo $? <- False (1)
-> [[ 11 =~ ^[0-9]+$ ]]; echo $? <- True (0)
-> [[ ! 11 =~ ^[0-9]+$ ]]; echo $? <- False (1)

BACK IN THE PSQL PROMPT: 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> UPDATE bikes SET available = true WHERE available = false;
-> This is the current content of the project bike-shop.sh file:

        #!/bin/bash

        PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"

        echo -e "\n~~~~~ Bike Rental Shop ~~~~~\n"

        MAIN_MENU() {
        if [[ $1 ]]
        then
            echo -e "\n$1"
        fi

        echo "How may I help you?" 
        echo -e "\n1. Rent a bike\n2. Return a bike\n3. Exit"
        read MAIN_MENU_SELECTION

        case $MAIN_MENU_SELECTION in
            1) RENT_MENU ;;
            2) RETURN_MENU ;;
            3) EXIT ;;
            *) MAIN_MENU "Please enter a valid option." ;;
        esac
        }

        RENT_MENU() {
        # get available bikes
        AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")

        # if no bikes available
        if [[ -z $AVAILABLE_BIKES ]]
        then
            # send to main menu
            MAIN_MENU "Sorry, we don't have any bikes available right now."
        else
            # display available bikes
            echo -e "\nHere are the bikes we have available:"
            echo "$AVAILABLE_BIKES" | while read BIKE_ID BAR TYPE BAR SIZE
            do
            echo "$BIKE_ID) $SIZE\" $TYPE Bike"
            done

            # ask for bike to rent
            echo -e "\nWhich one would you like to rent?"
            read BIKE_ID_TO_RENT

            # if input is not a number
            if [[ ! $BIKE_ID_TO_RENT =~ ^[0-9]+$ ]]
            then
            # send to main menu
            MAIN_MENU "That is not a valid bike number."
            else
            # get bike availability
            BIKE_AVAILABILITY=$($PSQL "SELECT available FROM bikes WHERE bike_id = $BIKE_ID_TO_RENT AND available = true")

            # if not available
            if [[ -z $BIKE_AVAILABILITY ]]
            then
                # send to main menu
                MAIN_MENU "That bike is not available."
            else
                # get customer info
                echo -e "\nWhat's your phone number?"
                read PHONE_NUMBER

                CUSTOMER_NAME=$($PSQL "SELECT name FROM customers WHERE phone = '$PHONE_NUMBER'")

                # if customer doesn't exist
                if [[ -z $CUSTOMER_NAME ]]
                then
                # get new customer name
                echo -e "\nWhat's your name?"
                read CUSTOMER_NAME

                # insert new customer
                INSERT_CUSTOMER_RESULT=$($PSQL "INSERT INTO customers(name, phone) VALUES('$CUSTOMER_NAME', '$PHONE_NUMBER')") 
                fi
            fi
            fi
        fi
        }

        RETURN_MENU() {
        echo "Return Menu"
        }

        EXIT() {
        echo -e "\nThank you for stopping in.\n"
        }

        MAIN_MENU

-> SELECT * FROM customers; <- To return information in the different tables 
-> SELECT * FROM rentals;
-> SELECT * FROM bikes;
-> More changes were made to the project bike-shop.sh file 
-> This is the current content of that file:

        #!/bin/bash

        PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"

        echo -e "\n~~~~~ Bike Rental Shop ~~~~~\n"

        MAIN_MENU() {
        if [[ $1 ]]
        then
            echo -e "\n$1"
        fi

        echo "How may I help you?" 
        echo -e "\n1. Rent a bike\n2. Return a bike\n3. Exit"
        read MAIN_MENU_SELECTION

        case $MAIN_MENU_SELECTION in
            1) RENT_MENU ;;
            2) RETURN_MENU ;;
            3) EXIT ;;
            *) MAIN_MENU "Please enter a valid option." ;;
        esac
        }

        RENT_MENU() {
        # get available bikes
        AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")

        # if no bikes available
        if [[ -z $AVAILABLE_BIKES ]]
        then
            # send to main menu
            MAIN_MENU "Sorry, we don't have any bikes available right now."
        else
            # display available bikes
            echo -e "\nHere are the bikes we have available:"
            echo "$AVAILABLE_BIKES" | while read BIKE_ID BAR TYPE BAR SIZE
            do
            echo "$BIKE_ID) $SIZE\" $TYPE Bike"
            done

            # ask for bike to rent
            echo -e "\nWhich one would you like to rent?"
            read BIKE_ID_TO_RENT

            # if input is not a number
            if [[ ! $BIKE_ID_TO_RENT =~ ^[0-9]+$ ]]
            then
            # send to main menu
            MAIN_MENU "That is not a valid bike number."
            else
            # get bike availability
            BIKE_AVAILABILITY=$($PSQL "SELECT available FROM bikes WHERE bike_id = $BIKE_ID_TO_RENT AND available = true")

            # if not available
            if [[ -z $BIKE_AVAILABILITY ]]
            then
                # send to main menu
                MAIN_MENU "That bike is not available."
            else
                # get customer info
                echo -e "\nWhat's your phone number?"
                read PHONE_NUMBER

                CUSTOMER_NAME=$($PSQL "SELECT name FROM customers WHERE phone = '$PHONE_NUMBER'")

                # if customer doesn't exist
                if [[ -z $CUSTOMER_NAME ]]
                then
                # get new customer name
                echo -e "\nWhat's your name?"
                read CUSTOMER_NAME

                # insert new customer
                INSERT_CUSTOMER_RESULT=$($PSQL "INSERT INTO customers(name, phone) VALUES('$CUSTOMER_NAME', '$PHONE_NUMBER')") 
                fi

                # get customer_id
                CUSTOMER_ID=$($PSQL "SELECT customer_id FROM customers WHERE phone = '$PHONE_NUMBER'")

                # insert bike rental
                INSERT_RENTAL_RESULT=$($PSQL "INSERT INTO rentals(customer_id, bike_id) VALUES($CUSTOMER_ID, $BIKE_ID_TO_RENT)")

                # set bike availability to false
                SET_TO_FALSE_RESULT=$($PSQL "UPDATE bikes SET available = false WHERE bike_id = $BIKE_ID_TO_RENT")

                # get bike info

                # send to main menu

            fi
            fi
        fi
        }

        RETURN_MENU() {
        echo "Return Menu"
        }

        EXIT() {
        echo -e "\nThank you for stopping in.\n"
        }

        MAIN_MENU

-> psql --username=freecodecamp --dbname=bikes <- Back in the psql prompt 
	-> This is similar to the previous change 
	-> We are creating echo statements in the Bash prompt, so that we can figure out which to add to the project .sh file 
-> SELECT * FROM rentals; 
-> SELECT * FROM bikes ORDER BY bike_id;
-> echo '28 | Mountain' | sed 's/ /=/g' <- Then entering this back into a Bash terminal, so that the format of the output is different when someone rents a bike 
	-> The project .sh file is run with ./bike-shop.sh in this Bash terminal 
-> echo '28 | Mountain' | sed 's/ //g' <- Then this
-> echo '28 | Mountain' | sed 's/ //'
-> echo '28 | Mountain' | sed 's/ |//'
-> echo '28 | Mountain' | sed 's/ |/"/'
-> echo $BIKE_INFO | sed 's/ |/"/' 
-> echo ' M e '
-> echo "$(echo ' M e ')."
-> echo "$(echo ' M e ' | sed 's/ //')."
-> echo "$(echo ' M e ' | sed 's/ //g')."
-> echo "$(echo ' M e ' | sed 's/^ //g')."
-> echo "$(echo '   M e ' | sed 's/^ //g')."
-> echo "$(echo '   M e ' | sed 's/^ *//g')."
-> echo "$(echo '   M e ' | sed 's/ $//g')."
-> echo "$(echo '   M e   ' | sed 's/ $//g')."
-> echo "$(echo '   M e   ' | sed 's/ *$//g')."
-> echo "$(echo '   M e   ' | sed 's/^ *| *$//g')."
-> man sed
	-> Then q to exit out of this in the terminal 
	-> This prints the manual for the sed command -> information about this command 
-> echo "$(echo '   M e   ' | sed -E 's/^ *| *$//g')."
-> When one of the bikes is rented, we remove it from the remaining list of rentable options  
-> Control c <- To exit out of the process currently being run in the terminal 
-> psql --username=freecodecamp --dbname=bikes <- Back in the psql prompt 
-> SELECT * FROM bikes ORDER BY bike_id; <- Returning values in the project table files 
-> SELECT * FROM customers;
-> SELECT * FROM rentals;
-> More edits were make to the project .sh file
-> The full content of this file now is below: 

        #!/bin/bash

        PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"

        echo -e "\n~~~~~ Bike Rental Shop ~~~~~\n"

        MAIN_MENU() {
        if [[ $1 ]]
        then
            echo -e "\n$1"
        fi

        echo "How may I help you?" 
        echo -e "\n1. Rent a bike\n2. Return a bike\n3. Exit"
        read MAIN_MENU_SELECTION

        case $MAIN_MENU_SELECTION in
            1) RENT_MENU ;;
            2) RETURN_MENU ;;
            3) EXIT ;;
            *) MAIN_MENU "Please enter a valid option." ;;
        esac
        }

        RENT_MENU() {
        # get available bikes
        AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")

        # if no bikes available
        if [[ -z $AVAILABLE_BIKES ]]
        then
            # send to main menu
            MAIN_MENU "Sorry, we don't have any bikes available right now."
        else
            # display available bikes
            echo -e "\nHere are the bikes we have available:"
            echo "$AVAILABLE_BIKES" | while read BIKE_ID BAR TYPE BAR SIZE
            do
            echo "$BIKE_ID) $SIZE\" $TYPE Bike"
            done

            # ask for bike to rent
            echo -e "\nWhich one would you like to rent?"
            read BIKE_ID_TO_RENT

            # if input is not a number
            if [[ ! $BIKE_ID_TO_RENT =~ ^[0-9]+$ ]]
            then
            # send to main menu
            MAIN_MENU "That is not a valid bike number."
            else
            # get bike availability
            BIKE_AVAILABILITY=$($PSQL "SELECT available FROM bikes WHERE bike_id = $BIKE_ID_TO_RENT AND available = true")

            # if not available
            if [[ -z $BIKE_AVAILABILITY ]]
            then
                # send to main menu
                MAIN_MENU "That bike is not available."
            else
                # get customer info
                echo -e "\nWhat's your phone number?"
                read PHONE_NUMBER

                CUSTOMER_NAME=$($PSQL "SELECT name FROM customers WHERE phone = '$PHONE_NUMBER'")

                # if customer doesn't exist
                if [[ -z $CUSTOMER_NAME ]]
                then
                # get new customer name
                echo -e "\nWhat's your name?"
                read CUSTOMER_NAME

                # insert new customer
                INSERT_CUSTOMER_RESULT=$($PSQL "INSERT INTO customers(name, phone) VALUES('$CUSTOMER_NAME', '$PHONE_NUMBER')") 
                fi

                # get customer_id
                CUSTOMER_ID=$($PSQL "SELECT customer_id FROM customers WHERE phone='$PHONE_NUMBER'")

                # insert bike rental
                INSERT_RENTAL_RESULT=$($PSQL "INSERT INTO rentals(customer_id, bike_id) VALUES($CUSTOMER_ID, $BIKE_ID_TO_RENT)")

                # set bike availability to false
                SET_TO_FALSE_RESULT=$($PSQL "UPDATE bikes SET available = false WHERE bike_id = $BIKE_ID_TO_RENT")

                # get bike info
                BIKE_INFO=$($PSQL "SELECT size, type FROM bikes WHERE bike_id = $BIKE_ID_TO_RENT")
                BIKE_INFO_FORMATTED=$(echo $BIKE_INFO | sed 's/ |/"/')
                
                # send to main menu
                MAIN_MENU "I have put you down for the $BIKE_INFO_FORMATTED Bike, $(echo $CUSTOMER_NAME | sed -r 's/^ *| *$//g')."
            fi
            fi
        fi
        }

        RETURN_MENU() {
        # get customer info
        echo -e "\nWhat's your phone number?"
        read PHONE_NUMBER

        CUSTOMER_ID=$($PSQL "SELECT customer_id FROM customers WHERE phone = '$PHONE_NUMBER'")

        # if not found
        if [[ -z $CUSTOMER_ID  ]]
        then
            # send to main menu
            MAIN_MENU "I could not find a record for that phone number."
        else
            # get customer's rentals

            # if no rentals

            # send to main menu

        fi
        }

        EXIT() {
        echo -e "\nThank you for stopping in.\n"
        }

        MAIN_MENU

-> psql --username=freecodecamp --dbname=bikes <- Now we are back in the psql prompt 
	-> We are creating outer joins between the different tables 
	-> This is first done in the terminal, and then the final statement is added to the project .sh file 
-> SELECT * FROM bikes;
-> SELECT * FROM bikes LEFT JOIN rentals USING(bike_id);
-> SELECT * FROM bikes INNER JOIN rentals USING(bike_id);
-> SELECT * FROM bikes INNER JOIN rentals USING(bike_id) INNER JOIN customers USING(customer_id);
-> SELECT * FROM bikes INNER JOIN rentals USING(bike_id) INNER JOIN customers USING(customer_id) WHERE phone = '555-5555' AND date_returned IS NULL;
-> SELECT bike_id, type, size FROM bikes INNER JOIN rentals USING(bike_id) INNER JOIN customers USING(customer_id) WHERE phone = '555-5555' AND date_returned IS NULL;
-> SELECT bike_id, type, size FROM bikes INNER JOIN rentals USING(bike_id) INNER JOIN customers USING(customer_id) WHERE phone = '555-5555' AND date_returned IS NULL ORDER BY bike_id;
-> More edits were made to the project .sh file, this is the current contents of this file: 

        #!/bin/bash

        PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"

        echo -e "\n~~~~~ Bike Rental Shop ~~~~~\n"

        MAIN_MENU() {
        if [[ $1 ]]
        then
            echo -e "\n$1"
        fi

        echo "How may I help you?" 
        echo -e "\n1. Rent a bike\n2. Return a bike\n3. Exit"
        read MAIN_MENU_SELECTION

        case $MAIN_MENU_SELECTION in
            1) RENT_MENU ;;
            2) RETURN_MENU ;;
            3) EXIT ;;
            *) MAIN_MENU "Please enter a valid option." ;;
        esac
        }

        RENT_MENU() {
        # get available bikes
        AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")

        # if no bikes available
        if [[ -z $AVAILABLE_BIKES ]]
        then
            # send to main menu
            MAIN_MENU "Sorry, we don't have any bikes available right now."
        else
            # display available bikes
            echo -e "\nHere are the bikes we have available:"
            echo "$AVAILABLE_BIKES" | while read BIKE_ID BAR TYPE BAR SIZE
            do
            echo "$BIKE_ID) $SIZE\" $TYPE Bike"
            done

            # ask for bike to rent
            echo -e "\nWhich one would you like to rent?"
            read BIKE_ID_TO_RENT

            # if input is not a number
            if [[ ! $BIKE_ID_TO_RENT =~ ^[0-9]+$ ]]
            then
            # send to main menu
            MAIN_MENU "That is not a valid bike number."
            else
            # get bike availability
            BIKE_AVAILABILITY=$($PSQL "SELECT available FROM bikes WHERE bike_id = $BIKE_ID_TO_RENT AND available = true")

            # if not available
            if [[ -z $BIKE_AVAILABILITY ]]
            then
                # send to main menu
                MAIN_MENU "That bike is not available."
            else
                # get customer info
                echo -e "\nWhat's your phone number?"
                read PHONE_NUMBER

                CUSTOMER_NAME=$($PSQL "SELECT name FROM customers WHERE phone = '$PHONE_NUMBER'")

                # if customer doesn't exist
                if [[ -z $CUSTOMER_NAME ]]
                then
                # get new customer name
                echo -e "\nWhat's your name?"
                read CUSTOMER_NAME

                # insert new customer
                INSERT_CUSTOMER_RESULT=$($PSQL "INSERT INTO customers(name, phone) VALUES('$CUSTOMER_NAME', '$PHONE_NUMBER')") 
                fi

                # get customer_id
                CUSTOMER_ID=$($PSQL "SELECT customer_id FROM customers WHERE phone='$PHONE_NUMBER'")

                # insert bike rental
                INSERT_RENTAL_RESULT=$($PSQL "INSERT INTO rentals(customer_id, bike_id) VALUES($CUSTOMER_ID, $BIKE_ID_TO_RENT)")

                # set bike availability to false
                SET_TO_FALSE_RESULT=$($PSQL "UPDATE bikes SET available = false WHERE bike_id = $BIKE_ID_TO_RENT")

                # get bike info
                BIKE_INFO=$($PSQL "SELECT size, type FROM bikes WHERE bike_id = $BIKE_ID_TO_RENT")
                BIKE_INFO_FORMATTED=$(echo $BIKE_INFO | sed 's/ |/"/')
                
                # send to main menu
                MAIN_MENU "I have put you down for the $BIKE_INFO_FORMATTED Bike, $(echo $CUSTOMER_NAME | sed -r 's/^ *| *$//g')."
            fi
            fi
        fi
        }

        RETURN_MENU() {
        # get customer info
        echo -e "\nWhat's your phone number?"
        read PHONE_NUMBER

        CUSTOMER_ID=$($PSQL "SELECT customer_id FROM customers WHERE phone = '$PHONE_NUMBER'")

        # if not found
        if [[ -z $CUSTOMER_ID  ]]
        then
            # send to main menu
            MAIN_MENU "I could not find a record for that phone number."
        else
            # get customer's rentals
            CUSTOMER_RENTALS=$($PSQL "SELECT bike_id, type, size FROM bikes INNER JOIN rentals USING(bike_id) INNER JOIN customers USING(customer_id) WHERE phone = '$PHONE_NUMBER' AND date_returned IS NULL ORDER BY bike_id")

            # if no rentals
            if [[ -z $CUSTOMER_RENTALS  ]]
            then
            # send to main menu
            MAIN_MENU "You do not have any bikes rented."
            else
            # display rented bikes
            echo -e "\nHere are your rentals:"
            echo "$CUSTOMER_RENTALS" | while read BIKE_ID BAR TYPE BAR SIZE
            do
                echo "$BIKE_ID) $SIZE\" $TYPE Bike"
            done

            # ask for bike to return
            echo -e "\nWhich one would you like to return?"
            read BIKE_ID_TO_RETURN

            # if not a number
            if [[ ! $BIKE_ID_TO_RETURN =~ ^[0-9]+$ ]]
            then
                # send to main menu
                MAIN_MENU "That is not a valid bike number."
            else
                # check if input is rented

                # if input not rented

                # send to main menu

            fi
            fi
        fi
        }

        EXIT() {
        echo -e "\nThank you for stopping in.\n"
        }

        MAIN_MENU

-> psql --username=freecodecamp --dbname=bikes <- Back in the psql prompt 
	-> This is part of a cycle of the uses of the prompt, we edit the project database with the psql prompt - and then edit the project .sh file again
	-> In this use of the psql prompt, we are returning information in the project database and performing a table join  
-> SELECT * FROM rentals INNER JOIN customers USING(customer_id);
-> SELECT * FROM rentals INNER JOIN customers USING(customer_id) WHERE phone = '555-5555' AND bike_id = 1 AND date_returned IS NULL;
-> SELECT rental_id FROM rentals INNER JOIN customers USING(customer_id) WHERE phone = '555-5555' AND bike_id = 1 AND date_returned IS NULL;
-> We are making edits to the project .sh file and then testing the changes to see if they have worked by executing the .sh file in a Bash prompt 
	-> We do this using ./bike-shop.sh after making changes to that .sh file 
-> This is the current contents of the project .sh file:

        #!/bin/bash

        PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c"

        echo -e "\n~~~~~ Bike Rental Shop ~~~~~\n"

        MAIN_MENU() {
        if [[ $1 ]]
        then
            echo -e "\n$1"
        fi

        echo "How may I help you?" 
        echo -e "\n1. Rent a bike\n2. Return a bike\n3. Exit"
        read MAIN_MENU_SELECTION

        case $MAIN_MENU_SELECTION in
            1) RENT_MENU ;;
            2) RETURN_MENU ;;
            3) EXIT ;;
            *) MAIN_MENU "Please enter a valid option." ;;
        esac
        }

        RENT_MENU() {
        # get available bikes
        AVAILABLE_BIKES=$($PSQL "SELECT bike_id, type, size FROM bikes WHERE available = true ORDER BY bike_id")

        # if no bikes available
        if [[ -z $AVAILABLE_BIKES ]]
        then
            # send to main menu
            MAIN_MENU "Sorry, we don't have any bikes available right now."
        else
            # display available bikes
            echo -e "\nHere are the bikes we have available:"
            echo "$AVAILABLE_BIKES" | while read BIKE_ID BAR TYPE BAR SIZE
            do
            echo "$BIKE_ID) $SIZE\" $TYPE Bike"
            done

            # ask for bike to rent
            echo -e "\nWhich one would you like to rent?"
            read BIKE_ID_TO_RENT

            # if input is not a number
            if [[ ! $BIKE_ID_TO_RENT =~ ^[0-9]+$ ]]
            then
            # send to main menu
            MAIN_MENU "That is not a valid bike number."
            else
            # get bike availability
            BIKE_AVAILABILITY=$($PSQL "SELECT available FROM bikes WHERE bike_id = $BIKE_ID_TO_RENT AND available = true")

            # if not available
            if [[ -z $BIKE_AVAILABILITY ]]
            then
                # send to main menu
                MAIN_MENU "That bike is not available."
            else
                # get customer info
                echo -e "\nWhat's your phone number?"
                read PHONE_NUMBER

                CUSTOMER_NAME=$($PSQL "SELECT name FROM customers WHERE phone = '$PHONE_NUMBER'")

                # if customer doesn't exist
                if [[ -z $CUSTOMER_NAME ]]
                then
                # get new customer name
                echo -e "\nWhat's your name?"
                read CUSTOMER_NAME

                # insert new customer
                INSERT_CUSTOMER_RESULT=$($PSQL "INSERT INTO customers(name, phone) VALUES('$CUSTOMER_NAME', '$PHONE_NUMBER')") 
                fi

                # get customer_id
                CUSTOMER_ID=$($PSQL "SELECT customer_id FROM customers WHERE phone='$PHONE_NUMBER'")

                # insert bike rental
                INSERT_RENTAL_RESULT=$($PSQL "INSERT INTO rentals(customer_id, bike_id) VALUES($CUSTOMER_ID, $BIKE_ID_TO_RENT)")

                # set bike availability to false
                SET_TO_FALSE_RESULT=$($PSQL "UPDATE bikes SET available = false WHERE bike_id = $BIKE_ID_TO_RENT")

                # get bike info
                BIKE_INFO=$($PSQL "SELECT size, type FROM bikes WHERE bike_id = $BIKE_ID_TO_RENT")
                BIKE_INFO_FORMATTED=$(echo $BIKE_INFO | sed 's/ |/"/')
                
                # send to main menu
                MAIN_MENU "I have put you down for the $BIKE_INFO_FORMATTED Bike, $(echo $CUSTOMER_NAME | sed -r 's/^ *| *$//g')."
            fi
            fi
        fi
        }

        RETURN_MENU() {
        # get customer info
        echo -e "\nWhat's your phone number?"
        read PHONE_NUMBER

        CUSTOMER_ID=$($PSQL "SELECT customer_id FROM customers WHERE phone = '$PHONE_NUMBER'")

        # if not found
        if [[ -z $CUSTOMER_ID  ]]
        then
            # send to main menu
            MAIN_MENU "I could not find a record for that phone number."
        else
            # get customer's rentals
            CUSTOMER_RENTALS=$($PSQL "SELECT bike_id, type, size FROM bikes INNER JOIN rentals USING(bike_id) INNER JOIN customers USING(customer_id) WHERE phone = '$PHONE_NUMBER' AND date_returned IS NULL ORDER BY bike_id")

            # if no rentals
            if [[ -z $CUSTOMER_RENTALS  ]]
            then
            # send to main menu
            MAIN_MENU "You do not have any bikes rented."
            else
            # display rented bikes
            echo -e "\nHere are your rentals:"
            echo "$CUSTOMER_RENTALS" | while read BIKE_ID BAR TYPE BAR SIZE
            do
                echo "$BIKE_ID) $SIZE\" $TYPE Bike"
            done

            # ask for bike to return
            echo -e "\nWhich one would you like to return?"
            read BIKE_ID_TO_RETURN

            # if not a number
            if [[ ! $BIKE_ID_TO_RETURN =~ ^[0-9]+$ ]]
            then
                # send to main menu
                MAIN_MENU "That is not a valid bike number."
            else
                # check if input is rented
                RENTAL_ID=$($PSQL "SELECT rental_id FROM rentals INNER JOIN customers USING(customer_id) WHERE phone = '$PHONE_NUMBER' AND bike_id = $BIKE_ID_TO_RETURN AND date_returned IS NULL")

                # if input not rented
                if [[ -z $RENTAL_ID ]]
                then
                # send to main menu
                MAIN_MENU "You do not have that bike rented."
                else
                # update date_returned
                RETURN_BIKE_RESULT=$($PSQL "UPDATE rentals SET date_returned = NOW() WHERE rental_id = $RENTAL_ID")
                
                # set bike availability to true
                SET_TO_TRUE_RESULT=$($PSQL "UPDATE bikes SET available = true WHERE bike_id = $BIKE_ID_TO_RETURN")
                
                # send to main menu
                MAIN_MENU "Thank you for returning your bike."
                fi
            fi
            fi
        fi
        }

        EXIT() {
        echo -e "\nThank you for stopping in.\n"
        }

        MAIN_MENU

-> psql --username=freecodecamp --dbname=bikes <- Back in the psql prompt 
-> SELECT * FROM rentals;
-> SELECT * FROM bikes ORDER BY bike_id;

Setting up & connecting to the database
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> We are using the program to alter the database 
-> The script is interacting with a psql database 
-> The output is only consisting of rows and columns, separated by tabs
-> We are connecting to the database

Shell file functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> MAIN_MENU <- This function displays the menu options 
	-> This also handles user inputs for selecting options when the project .sh file is run 
-> RENT_MENU <- This allows the user to input information pertaining to renting a bike 
	-> Displaying the bikes left to rent 
	-> Inputting customer information 
	-> Updating the database with rental information 
-> RETURN_MENU
	-> This function allows a customer to return a bike 
	-> This gets customer information, returns a list with the different bikes that they can return and updates the database with that return information 
	-> This also provides an EXIT option, for the user to back out of the shell file 
-> MAIN_MENU 
 	-> This function displays the main menu options and reads the user input 
	-> Depending on what the user enters, we either run the EXIT, RETURN_MENY or RENT_MENU functions 
	-> We re-run the function if the user enters an invalid statement 

Error handling 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> We have to error handle for different case scenarios 
-> These include what happens if 
	- There aren't any bikes left to rent 
	- The user enters something which isn't a bike number 
	- The user wants to return a bike which they don't have  

Database queries 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> We are using SQL queries to interact with the database 
-> Information we are retrieving pertains to available bikes, customer details and rented bikes 
-> This allows us to update information in the database based on the user's actions 

Input validation  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-> We also have to check that what the user enters is in the correct syntax
-> We need to check that the 'bike number' is actually an integer
-> We also check the format of the phone number 
-> So the user can enter information and it can be stored in the project database 
-> This allows the user to rent and return bikes, with error handling 